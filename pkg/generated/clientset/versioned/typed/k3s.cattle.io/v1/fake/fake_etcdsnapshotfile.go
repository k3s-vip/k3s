/*
Copyright The Kubernetes Authors.
*/

// Code generated by main. DO NOT EDIT.

package fake

import (
	v1 "github.com/k3s-io/k3s/pkg/apis/k3s.cattle.io/v1"
	k3scattleiov1 "github.com/k3s-io/k3s/pkg/generated/clientset/versioned/typed/k3s.cattle.io/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeETCDSnapshotFiles implements ETCDSnapshotFileInterface
type fakeETCDSnapshotFiles struct {
	*gentype.FakeClientWithList[*v1.ETCDSnapshotFile, *v1.ETCDSnapshotFileList]
	Fake *FakeK3sV1
}

func newFakeETCDSnapshotFiles(fake *FakeK3sV1) k3scattleiov1.ETCDSnapshotFileInterface {
	return &fakeETCDSnapshotFiles{
		gentype.NewFakeClientWithList[*v1.ETCDSnapshotFile, *v1.ETCDSnapshotFileList](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("etcdsnapshotfiles"),
			v1.SchemeGroupVersion.WithKind("ETCDSnapshotFile"),
			func() *v1.ETCDSnapshotFile { return &v1.ETCDSnapshotFile{} },
			func() *v1.ETCDSnapshotFileList { return &v1.ETCDSnapshotFileList{} },
			func(dst, src *v1.ETCDSnapshotFileList) { dst.ListMeta = src.ListMeta },
			func(list *v1.ETCDSnapshotFileList) []*v1.ETCDSnapshotFile { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.ETCDSnapshotFileList, items []*v1.ETCDSnapshotFile) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
